[{"p":{"/guides/getting-started/":{"n":"Getting Started","s":"This guide gets you up and running quickly with TinyTick."},"/guides/key-concepts/":{"n":"Key Concepts","s":"This guide runs through some of the key concepts you need to understand to use TinyTick effectively."},"/guides/defining-tasks/":{"n":"Defining Tasks","s":"This guide shows you how to define tasks in TinyTick."},"/guides/scheduling-tasks/":{"n":"Scheduling Tasks","s":"This guide shows you how to schedule tasks to run in TinyTick."},"/guides/advanced-usage/aborting-tasks/":{"n":"Aborting Tasks","s":"If a task run takes too long, the Manager will attempt to abort it, and potentially retry it."},"/guides/advanced-usage/retries-and-backoff/":{"n":"Retries And Backoff","s":"Since a task run can be aborted (if it times out) or throw an error, it's useful for the Manager to be able to retry it - and you can completely control how many times a task run is retried until it is successful, and how long to wait between each retry."},"/guides/advanced-usage/starting-and-stopping/":{"n":"Starting And Stopping","s":"We finish with a relatively simple topic, but one that has some important behaviors worth mentioning."},"/guides/advanced-usage/":{"n":"Advanced Usage","s":"These guides show you some of the more advanced features of TinyTick, including how to create abortable task runs, how to retry tasks, and how to control the state of the Manager."},"/guides/example-use-cases/paginated-and-nested-data/":{"n":"Paginated And Nested Data","s":"Imagine you are fetching information about multiple 'parent' items from a network endpoint, but the items you want are paginated. Also imagine that each item requires subsequent separate network requests to access 'child' data about it - which might also be paginated."},"/guides/example-use-cases/":{"n":"Example Use Cases","s":"These guides includes some examples of how TinyTick can be used in real applications and problems it can solve."},"/guides/releases/":{"n":"Releases","s":"This is a reverse chronological list of the major TinyTick releases, with highlighted features."},"/guides/":{"n":"Guides","s":"This series of guides helps explain the concepts behind TinyTick and is designed to complement the more comprehensive [API documentation](/api/tinytick/interfaces/manager/manager/)."},"/demos/scheduling/":{"n":"Scheduling","s":"In this demo, we show how to configure and schedule a task."},"/demos/":{"n":"Demos","s":"This is a selection of demos that show how TinyTick can be used."},"/api/tinytick/interfaces/manager/manager/methods/manager/getmanagerconfig/":{"n":"getManagerConfig","s":"The getManagerConfig method returns the current configuration of the Manager as a whole."},"/api/tinytick/interfaces/manager/manager/methods/manager/setmanagerconfig/":{"n":"setManagerConfig","s":"The setManagerConfig method lets you configure the Manager as a whole."},"/api/tinytick/interfaces/manager/manager/methods/task/gettaskconfig/":{"n":"getTaskConfig","s":"The getTaskConfig method returns the current configuration of a Task."},"/api/tinytick/interfaces/manager/manager/methods/task/gettaskids/":{"n":"getTaskIds","s":"The getTaskIds method returns an array containing all registered task Ids."},"/api/tinytick/interfaces/manager/manager/methods/task/settask/":{"n":"setTask","s":"The setTask method registers a task with the Manager, optionally associating it with a category and/or a custom configuration."},"/api/tinytick/interfaces/manager/manager/methods/task/deltask/":{"n":"delTask","s":"The delTask method deletes a task registration."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/getrunningtaskrunids/":{"n":"getRunningTaskRunIds","s":"The getRunningTaskRunIds method returns an array containing all running task run Ids."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/getscheduledtaskrunids/":{"n":"getScheduledTaskRunIds","s":"The getScheduledTaskRunIds method returns an array containing all scheduled task run Ids."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/gettaskrunconfig/":{"n":"getTaskRunConfig","s":"The getTaskRunConfig method returns the configuration of a task run."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/gettaskruninfo/":{"n":"getTaskRunInfo","s":"The getTaskRunInfo method returns information about a scheduled or running task run."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/gettaskrunrunning/":{"n":"getTaskRunRunning","s":"The getTaskRunRunning method returns whether a task run is running yet or not."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/scheduletaskrun/":{"n":"scheduleTaskRun","s":"The scheduleTaskRun method schedules a specific task to run in the future."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/untiltaskrundone/":{"n":"untilTaskRunDone","s":"The untilTaskRunDone method returns a Promise that resolves when a task run has finished running, regardless of whether it was successful or not."},"/api/tinytick/interfaces/manager/manager/methods/taskrun/deltaskrun/":{"n":"delTaskRun","s":"The delTaskRun method deletes a scheduled task run or aborts a running one."},"/api/tinytick/interfaces/manager/manager/methods/category/getcategoryconfig/":{"n":"getCategoryConfig","s":"The getCategoryConfig method returns the current configuration of a category."},"/api/tinytick/interfaces/manager/manager/methods/category/getcategoryids/":{"n":"getCategoryIds","s":"The getCategoryIds method returns an array containing all registered category Ids."},"/api/tinytick/interfaces/manager/manager/methods/category/setcategory/":{"n":"setCategory","s":"The setCategory method lets you create and configure a category for tasks."},"/api/tinytick/interfaces/manager/manager/methods/category/delcategory/":{"n":"delCategory","s":"The delCategory method deletes a category configuration."},"/api/tinytick/interfaces/manager/manager/methods/lifecycle/getnow/":{"n":"getNow","s":"The getNow method is a convenience function to get the current timestamp as seen by the Manager."},"/api/tinytick/interfaces/manager/manager/methods/lifecycle/getstatus/":{"n":"getStatus","s":"The getStatus method returns the current status of the Manager."},"/api/tinytick/interfaces/manager/manager/methods/lifecycle/start/":{"n":"start","s":"The start method begins the 'ticks' of the Manager, which will start the process of managing the schedules, timeouts, and retries of tasks."},"/api/tinytick/interfaces/manager/manager/methods/lifecycle/stop/":{"n":"stop","s":"The stop method stops the 'ticks' of the Manager, which will cease the process of managing the schedules, timeouts, and retries of tasks."},"/api/tinytick/interfaces/manager/manager/methods/listener/adddidticklistener/":{"n":"addDidTickListener","s":"The addDidTickListener method registers a listener function with the Manager that will be called just after the Manager ticks."},"/api/tinytick/interfaces/manager/manager/methods/listener/addrunningtaskrunidslistener/":{"n":"addRunningTaskRunIdsListener","s":"The addRunningTaskRunIdsListener method."},"/api/tinytick/interfaces/manager/manager/methods/listener/addscheduledtaskrunidslistener/":{"n":"addScheduledTaskRunIdsListener","s":"The addScheduledTaskRunIdsListener method registers a listener function with the Manager that will be called whenever its list of scheduled task run Ids changes."},"/api/tinytick/interfaces/manager/manager/methods/listener/addstatuslistener/":{"n":"addStatusListener","s":"The addStatusListener method registers a listener function with the Manager that will be called when the Manager changes status from stopped to started, or vice-versa."},"/api/tinytick/interfaces/manager/manager/methods/listener/addtaskrunfailedlistener/":{"n":"addTaskRunFailedListener","s":"The addTaskRunFailedListener method registers a listener function with the Manager that will be called whenever a task run fails, whether because of timeout, error, or deletion."},"/api/tinytick/interfaces/manager/manager/methods/listener/addtaskrunrunninglistener/":{"n":"addTaskRunRunningListener","s":"The addTaskRunRunningListener method registers a listener function with the Manager that will be called whenever the state of a relevant task run changes."},"/api/tinytick/interfaces/manager/manager/methods/listener/addwillticklistener/":{"n":"addWillTickListener","s":"The addWillTickListener method registers a listener function with the Manager that will be called just before the Manager ticks."},"/api/tinytick/interfaces/manager/manager/methods/listener/dellistener/":{"n":"delListener","s":"The delListener method removes a listener that was previously added to the Manager."},"/api/tinytick/interfaces/manager/manager/":{"n":"Manager","s":"The Manager interface represents the main entry point for the TinyTick API, and the object with which you register each Task, and schedule them to run."},"/api/tinytick/enumerations/manager/managerstatus/":{"n":"ManagerStatus","s":"The ManagerStatus enum represents the current status of the Manager."},"/api/tinytick/enumerations/taskrun/taskrunreason/":{"n":"TaskRunReason","s":"The TaskRunReason enum is used to indicate why a task run changed, most usefully when it finishes."},"/api/tinytick/functions/creation/createmanager/":{"n":"createManager","s":"The createManager function creates a Manager, and is the main entry point into the tinytick module."},"/api/tinytick/functions/utility/getmanagerstatustext/":{"n":"getManagerStatusText","s":"The getManagerStatusText function returns a string describing the current status of the Manager."},"/api/tinytick/functions/utility/gettaskrunreasontext/":{"n":"getTaskRunReasonText","s":"The getTaskRunReasonText function returns a string describing the reason for a task run changing state."},"/api/tinytick/type-aliases/manager/managerconfig/":{"n":"ManagerConfig","s":"The ManagerConfig type represents a configuration you can provide for the Manager as a whole."},"/api/tinytick/type-aliases/manager/managerconfigwithdefaults/":{"n":"ManagerConfigWithDefaults","s":"The ManagerConfigWithDefaults type represents the full configuration for the Manager as a whole, including any defaults of those you yourself have not provided."},"/api/tinytick/type-aliases/task/task/":{"n":"Task","s":"The Task type represents a task function that has been registered with the Manager."},"/api/tinytick/type-aliases/taskrun/taskrunconfig/":{"n":"TaskRunConfig","s":"The TaskRunConfig type represents a configuration you can provide for a task run."},"/api/tinytick/type-aliases/taskrun/taskrunconfigwithdefaults/":{"n":"TaskRunConfigWithDefaults","s":"The TaskRunConfigWithDefaults type represents the full configuration for a task run, including any defaults of those you yourself have not provided."},"/api/tinytick/type-aliases/taskrun/taskruninfo/":{"n":"TaskRunInfo","s":"The TaskRunInfo type represents information about a scheduled or running task run."},"/api/tinytick/type-aliases/identity/changedids/":{"n":"ChangedIds","s":"The ChangedIds type describes the Ids that were added or removed from a list of Ids."},"/api/tinytick/type-aliases/identity/id/":{"n":"Id","s":"The Id type is a simple alias for a string."},"/api/tinytick/type-aliases/identity/idaddedorremoved/":{"n":"IdAddedOrRemoved","s":"The IdAddedOrRemoved type describes a change made to an Id in a list of Ids."},"/api/tinytick/type-aliases/identity/idornull/":{"n":"IdOrNull","s":"The IdOrNull type is a simple alias for the union of a string or `null` value, where typically `null` indicates a wildcard - such as when used in the Manager's addScheduledTaskRunRunningListener method."},"/api/tinytick/type-aliases/identity/ids/":{"n":"Ids","s":"The Ids type is a simple alias for an array of strings."},"/api/tinytick/type-aliases/listener/statuslistener/":{"n":"StatusListener","s":"The StatusListener type describes a function that is used to listen to the fact that the Manager changed status from stopped to started, or vice-versa."},"/api/tinytick/type-aliases/listener/taskrunfailedlistener/":{"n":"TaskRunFailedListener","s":"The TaskRunFailedListener type describes a function that is used to listen to a failing task run, whether because of timeout, error, or deletion."},"/api/tinytick/type-aliases/listener/taskrunidslistener/":{"n":"TaskRunIdsListener","s":"The TaskRunIdsListener type describes a function that is used to listen to changes to task run Ids in the Manager."},"/api/tinytick/type-aliases/listener/taskrunrunninglistener/":{"n":"TaskRunRunningListener","s":"The TaskRunRunningListener type describes a function that is used to listen to changes to a specific task run in the Manager."},"/api/tinytick/type-aliases/listener/ticklistener/":{"n":"TickListener","s":"The TickListener type describes a function that is used to listen to the fact that the Manager is either about to tick or did just tick."},"/api/tinytick/type-aliases/timing/durationms/":{"n":"DurationMs","s":"The DurationMs type."},"/api/tinytick/type-aliases/timing/timestampms/":{"n":"TimestampMs","s":"The TimestampMs type is a simple alias for a number."},"/api/tinytick/":{"n":"tinytick","s":"The tinytick module."},"/api/ui-react/functions/context-components/provider/":{"n":"Provider","s":"The Provider component is used to wrap part of an application in a context that provides a Manager to be used by hooks and components within."},"/api/ui-react/functions/manager-hooks/usecreatemanager/":{"n":"useCreateManager","s":"The useCreateManager hook is used to create a Manager within a React application with convenient memoization."},"/api/ui-react/functions/manager-hooks/usemanager/":{"n":"useManager","s":"The useManager hook returns the Manager provided by the a Provider component."},"/api/ui-react/functions/manager-hooks/usestartcallback/":{"n":"useStartCallback","s":"The useStartCallback hook returns a callback that can be used to start the Manager provided by a Provider component."},"/api/ui-react/functions/manager-hooks/usestatus/":{"n":"useStatus","s":"The useStatus hook returns the current status of the Manager provided by a Provider component."},"/api/ui-react/functions/manager-hooks/usestopcallback/":{"n":"useStopCallback","s":"The useStopCallback hook returns a callback that can be used to stop the Manager provided by a Provider component."},"/api/ui-react/functions/task-hooks/usesettask/":{"n":"useSetTask","s":"The useSetTask hook returns registers task in the Manager provided by a Provider component, optionally associating it with a category and/or a custom configuration."},"/api/ui-react/functions/task-run-hooks/userunningtaskrunids/":{"n":"useRunningTaskRunIds","s":"The useRunningTaskRunIds hook returns the current running task run Ids of the Manager provided by a Provider component."},"/api/ui-react/functions/task-run-hooks/usescheduletaskrun/":{"n":"useScheduleTaskRun","s":"The useScheduleTaskRun hook can be used to schedule a specific task in the Manager provided by a Provider component."},"/api/ui-react/functions/task-run-hooks/usescheduletaskruncallback/":{"n":"useScheduleTaskRunCallback","s":"The useScheduleTaskRunCallback hook returns a function that can be used to schedule a specific task in the Manager provided by a Provider component."},"/api/ui-react/functions/task-run-hooks/usescheduledtaskrunids/":{"n":"useScheduledTaskRunIds","s":"The useScheduledTaskRunIds hook returns the current scheduled task run Ids of the Manager provided by a Provider component."},"/api/ui-react/functions/task-run-hooks/usetaskrunrunning/":{"n":"useTaskRunRunning","s":"The useTaskRunRunning hook returns a boolean indicating whether a specific task run is currently running in the Manager provided by a Provider component."},"/api/ui-react/type-aliases/props/providerprops/":{"n":"ProviderProps","s":"ProviderProps props are used with the Manager component, so that a TinyTick Manager can be passed into the context of an application and used throughout."},"/api/ui-react/":{"n":"ui-react","s":"The ui-react module of the TinyTick project provides both hooks and components to make it easy to use TinyTick in a React application."}}},{}]